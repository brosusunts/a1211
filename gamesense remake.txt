local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local library = {
    flags = {},
    icons = {
        rage = "rbxassetid://10709752035",
        legit = "rbxassetid://10709752254",
        visuals = "rbxassetid://10709752996",
        misc = "rbxassetid://10709753064",
        settings = "rbxassetid://10709753149",
        lua = "rbxassetid://10709753421",
        config = "rbxassetid://10709753570",
        logo = "rbxassetid://11389674972",
        watermark = "rbxassetid://11389675592"
    },
    theme = {
        accent = Color3.fromRGB(255, 59, 59),
        background = Color3.fromRGB(17, 17, 17),
        foreground = Color3.fromRGB(25, 25, 25),
        black = Color3.fromRGB(0, 0, 0),
        light_contrast = Color3.fromRGB(35, 35, 35),
        dark_contrast = Color3.fromRGB(15, 15, 15),
        text = Color3.fromRGB(255, 255, 255),
        dark_text = Color3.fromRGB(175, 175, 175)
    }
}

library.Init()
        gradient1 = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 59, 59)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 89, 89))
        }),
        gradient2 = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(17, 17, 17)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(25, 25, 25))
        })
    }
}

library.Init = function()
    if CoreGui:FindFirstChild("PrimordialUI") then
        CoreGui:FindFirstChild("PrimordialUI"):Destroy()
    end
    
    library.ScreenGui = Instance.new("ScreenGui")
    library.ScreenGui.Name = "PrimordialUI"
    library.ScreenGui.Parent = CoreGui
    
    library.MainFrame = Instance.new("Frame")
    library.MainFrame.Name = "Main"
    library.MainFrame.BackgroundColor3 = library.theme.background
    library.MainFrame.BorderSizePixel = 0
    library.MainFrame.Position = UDim2.new(0.5, -400, 0.5, -300)
    library.MainFrame.Size = UDim2.new(0, 800, 0, 600)
    library.MainFrame.Parent = library.ScreenGui
    
    -- Add Logo
    library.Logo = Instance.new("ImageLabel")
    library.Logo.Name = "Logo"
    library.Logo.Image = library.icons.logo
    library.Logo.BackgroundTransparency = 1
    library.Logo.Size = UDim2.new(0, 40, 0, 40)
    library.Logo.Position = UDim2.new(0, 10, 0, 0)
    library.Logo.Parent = library.MainFrame
end

-- Tab System
library.TabContainer = Instance.new("Frame")
library.TabContainer.Name = "TabContainer"
library.TabContainer.BackgroundColor3 = library.theme.dark_contrast
library.TabContainer.BorderSizePixel = 0
library.TabContainer.Position = UDim2.new(0, 0, 0, 40)
library.TabContainer.Size = UDim2.new(0, 60, 1, -40)
library.TabContainer.Parent = library.MainFrame

library.ContentContainer = Instance.new("Frame")
library.ContentContainer.Name = "ContentContainer"
library.ContentContainer.BackgroundTransparency = 1
library.ContentContainer.Position = UDim2.new(0, 60, 0, 40)
library.ContentContainer.Size = UDim2.new(1, -60, 1, -40)
library.ContentContainer.Parent = library.MainFrame

library.CreateTab = function(name, icon)
    local TabButton = Instance.new("ImageButton")
    TabButton.Name = name .. "Tab"
    TabButton.Image = library.icons[icon]
    TabButton.BackgroundColor3 = library.theme.light_contrast
    TabButton.BorderSizePixel = 0
    TabButton.Size = UDim2.new(1, 0, 0, 40)
    TabButton.Parent = library.TabContainer
    
    local TabContent = Instance.new("ScrollingFrame")
    TabContent.Name = name .. "Content"
    TabContent.BackgroundTransparency = 1
    TabContent.BorderSizePixel = 0
    TabContent.Position = UDim2.new(0, 0, 0, 0)
    TabContent.Size = UDim2.new(1, 0, 1, 0)
    TabContent.ScrollBarThickness = 2
    TabContent.Parent = library.ContentContainer
    
    return TabContent
end

-- Section Implementation
library.CreateSection = function(tab, name)
    local SectionFrame = Instance.new("Frame")
    SectionFrame.Name = name .. "Section"
    SectionFrame.BackgroundColor3 = library.theme.foreground
    SectionFrame.BorderSizePixel = 0
    SectionFrame.Size = UDim2.new(1, -20, 0, 30)
    SectionFrame.Parent = tab
    
    local SectionTitle = Instance.new("TextLabel")
    SectionTitle.Name = "Title"
    SectionTitle.Text = name
    SectionTitle.BackgroundTransparency = 1
    SectionTitle.Position = UDim2.new(0, 10, 0, 0)
    SectionTitle.Size = UDim2.new(1, -20, 0, 30)
    SectionTitle.Font = Enum.Font.SourceSansBold
    SectionTitle.TextColor3 = library.theme.text
    SectionTitle.TextSize = 14
    SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    SectionTitle.Parent = SectionFrame
    
    local SectionContent = Instance.new("Frame")
    SectionContent.Name = "Content"
    SectionContent.BackgroundTransparency = 1
    SectionContent.Position = UDim2.new(0, 0, 0, 30)
    SectionContent.Size = UDim2.new(1, 0, 0, 0)
    SectionContent.AutomaticSize = Enum.AutomaticSize.Y
    SectionContent.Parent = SectionFrame
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = SectionContent
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 5)
    
    return SectionContent
end

-- Toggle Implementation
library.CreateToggle = function(section, name, default, callback)
    local ToggleFrame = Instance.new("Frame")
    ToggleFrame.Name = name .. "Toggle"
    ToggleFrame.BackgroundColor3 = library.theme.light_contrast
    ToggleFrame.BorderSizePixel = 0
    ToggleFrame.Size = UDim2.new(1, 0, 0, 30)
    ToggleFrame.Parent = section
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Name = "Button"
    ToggleButton.BackgroundColor3 = library.theme.dark_contrast
    ToggleButton.BorderSizePixel = 0
    ToggleButton.Position = UDim2.new(1, -50, 0.5, -10)
    ToggleButton.Size = UDim2.new(0, 40, 0, 20)
    ToggleButton.Text = ""
    ToggleButton.Parent = ToggleFrame
    
    local ToggleTitle = Instance.new("TextLabel")
    ToggleTitle.Name = "Title"
    ToggleTitle.Text = name
    ToggleTitle.BackgroundTransparency = 1
    ToggleTitle.Position = UDim2.new(0, 10, 0, 0)
    ToggleTitle.Size = UDim2.new(1, -70, 1, 0)
    ToggleTitle.Font = Enum.Font.SourceSans
    ToggleTitle.TextColor3 = library.theme.text
    ToggleTitle.TextSize = 14
    ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left
    ToggleTitle.Parent = ToggleFrame
    
    local ToggleIndicator = Instance.new("Frame")
    ToggleIndicator.Name = "Indicator"
    ToggleIndicator.BackgroundColor3 = library.theme.accent
    ToggleIndicator.BorderSizePixel = 0
    ToggleIndicator.Position = UDim2.new(0, 2, 0.5, -8)
    ToggleIndicator.Size = UDim2.new(0, 16, 0, 16)
    ToggleIndicator.Parent = ToggleButton
end

-- Slider Implementation
library.CreateSlider = function(section, name, min, max, default, callback)
    local SliderFrame = Instance.new("Frame")
    SliderFrame.Name = name .. "Slider"
    SliderFrame.BackgroundColor3 = library.theme.light_contrast
    SliderFrame.BorderSizePixel = 0
    SliderFrame.Size = UDim2.new(1, 0, 0, 45)
    SliderFrame.Parent = section
    
    local SliderTitle = Instance.new("TextLabel")
    SliderTitle.Name = "Title"
    SliderTitle.Text = name
    SliderTitle.BackgroundTransparency = 1
    SliderTitle.Position = UDim2.new(0, 10, 0, 0)
    SliderTitle.Size = UDim2.new(1, -20, 0, 30)
    SliderTitle.Font = Enum.Font.SourceSans
    SliderTitle.TextColor3 = library.theme.text
    SliderTitle.TextSize = 14
    SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
    SliderTitle.Parent = SliderFrame
    
    local SliderBar = Instance.new("Frame")
    SliderBar.Name = "Bar"
    SliderBar.BackgroundColor3 = library.theme.dark_contrast
    SliderBar.BorderSizePixel = 0
    SliderBar.Position = UDim2.new(0, 10, 0, 30)
    SliderBar.Size = UDim2.new(1, -20, 0, 4)
    SliderBar.Parent = SliderFrame
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Name = "Fill"
    SliderFill.BackgroundColor3 = library.theme.accent
    SliderFill.BorderSizePixel = 0
    SliderFill.Size = UDim2.new(0.5, 0, 1, 0)
    SliderFill.Parent = SliderBar
    
    local SliderValue = Instance.new("TextLabel")
    SliderValue.Name = "Value"
    SliderValue.Text = tostring(default)
    SliderValue.BackgroundTransparency = 1
    SliderValue.Position = UDim2.new(1, -50, 0, 0)
    SliderValue.Size = UDim2.new(0, 40, 0, 30)
    SliderValue.Font = Enum.Font.SourceSans
    SliderValue.TextColor3 = library.theme.text
    SliderValue.TextSize = 14
    SliderValue.Parent = SliderFrame
end
-- Dropdown Implementation
library.CreateDropdown = function(section, name, options, default, callback)
    local DropdownFrame = Instance.new("Frame")
    DropdownFrame.Name = name .. "Dropdown"
    DropdownFrame.BackgroundColor3 = library.theme.light_contrast
    DropdownFrame.BorderSizePixel = 0
    DropdownFrame.Size = UDim2.new(1, 0, 0, 30)
    DropdownFrame.Parent = section
    
    local DropdownButton = Instance.new("TextButton")
    DropdownButton.Name = "Button"
    DropdownButton.Text = default or "Select"
    DropdownButton.BackgroundColor3 = library.theme.dark_contrast
    DropdownButton.BorderSizePixel = 0
    DropdownButton.Position = UDim2.new(0, 10, 0, 5)
    DropdownButton.Size = UDim2.new(1, -20, 0, 20)
    DropdownButton.Font = Enum.Font.SourceSans
    DropdownButton.TextColor3 = library.theme.text
    DropdownButton.TextSize = 14
    DropdownButton.Parent = DropdownFrame
    
    local DropdownContainer = Instance.new("Frame")
    DropdownContainer.Name = "Container"
    DropdownContainer.BackgroundColor3 = library.theme.dark_contrast
    DropdownContainer.BorderSizePixel = 0
    DropdownContainer.Position = UDim2.new(0, 10, 0, 30)
    DropdownContainer.Size = UDim2.new(1, -20, 0, 0)
    DropdownContainer.ClipsDescendants = true
    DropdownContainer.Parent = DropdownFrame
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = DropdownContainer
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 2)
end

-- Colorpicker Implementation
library.CreateColorPicker = function(section, name, default, callback)
    local ColorPickerFrame = Instance.new("Frame")
    ColorPickerFrame.Name = name .. "ColorPicker"
    ColorPickerFrame.BackgroundColor3 = library.theme.light_contrast
    ColorPickerFrame.BorderSizePixel = 0
    ColorPickerFrame.Size = UDim2.new(1, 0, 0, 30)
    ColorPickerFrame.Parent = section
    
    local ColorPickerButton = Instance.new("TextButton")
    ColorPickerButton.Name = "Button"
    ColorPickerButton.Text = ""
    ColorPickerButton.BackgroundColor3 = default or Color3.fromRGB(255, 255, 255)
    ColorPickerButton.BorderSizePixel = 0
    ColorPickerButton.Position = UDim2.new(1, -50, 0.5, -10)
    ColorPickerButton.Size = UDim2.new(0, 40, 0, 20)
    ColorPickerButton.Parent = ColorPickerFrame
    
    local ColorPickerTitle = Instance.new("TextLabel")
    ColorPickerTitle.Name = "Title"
    ColorPickerTitle.Text = name
    ColorPickerTitle.BackgroundTransparency = 1
    ColorPickerTitle.Position = UDim2.new(0, 10, 0, 0)
    ColorPickerTitle.Size = UDim2.new(1, -70, 1, 0)
    ColorPickerTitle.Font = Enum.Font.SourceSans
    ColorPickerTitle.TextColor3 = library.theme.text
    ColorPickerTitle.TextSize = 14
    ColorPickerTitle.TextXAlignment = Enum.TextXAlignment.Left
    ColorPickerTitle.Parent = ColorPickerFrame
end

-- Keybind System Implementation
library.CreateKeybind = function(section, name, default, callback)
    local KeybindFrame = Instance.new("Frame")
    KeybindFrame.Name = name .. "Keybind"
    KeybindFrame.BackgroundColor3 = library.theme.light_contrast
    KeybindFrame.BorderSizePixel = 0
    KeybindFrame.Size = UDim2.new(1, 0, 0, 30)
    KeybindFrame.Parent = section
    
    local KeybindButton = Instance.new("TextButton")
    KeybindButton.Name = "Button"
    KeybindButton.Text = default and default.Name or "None"
    KeybindButton.BackgroundColor3 = library.theme.dark_contrast
    KeybindButton.BorderSizePixel = 0
    KeybindButton.Position = UDim2.new(1, -90, 0.5, -10)
    KeybindButton.Size = UDim2.new(0, 80, 0, 20)
    KeybindButton.Font = Enum.Font.SourceSans
    KeybindButton.TextColor3 = library.theme.text
    KeybindButton.TextSize = 14
    KeybindButton.Parent = KeybindFrame
    
    local KeybindTitle = Instance.new("TextLabel")
    KeybindTitle.Name = "Title"
    KeybindTitle.Text = name
    KeybindTitle.BackgroundTransparency = 1
    KeybindTitle.Position = UDim2.new(0, 10, 0, 0)
    KeybindTitle.Size = UDim2.new(1, -110, 1, 0)
    KeybindTitle.Font = Enum.Font.SourceSans
    KeybindTitle.TextColor3 = library.theme.text
    KeybindTitle.TextSize = 14
    KeybindTitle.TextXAlignment = Enum.TextXAlignment.Left
    KeybindTitle.Parent = KeybindFrame
    
    -- Keybind Logic
    local listening = false
    local current = default
    
    KeybindButton.MouseButton1Click:Connect(function()
        listening = true
        KeybindButton.Text = "..."
    end)
end

-- Multi-Dropdown Implementation
library.CreateMultiDropdown = function(section, name, options, default, callback)
    local MultiDropFrame = Instance.new("Frame")
    MultiDropFrame.Name = name .. "MultiDropdown"
    MultiDropFrame.BackgroundColor3 = library.theme.light_contrast
    MultiDropFrame.BorderSizePixel = 0
    MultiDropFrame.Size = UDim2.new(1, 0, 0, 30)
    MultiDropFrame.Parent = section
    
    local DropButton = Instance.new("TextButton")
    DropButton.Name = "Button"
    DropButton.Text = "..."
    DropButton.BackgroundColor3 = library.theme.dark_contrast
    DropButton.BorderSizePixel = 0
    DropButton.Position = UDim2.new(0, 10, 0, 5)
    DropButton.Size = UDim2.new(1, -20, 0, 20)
    DropButton.Font = Enum.Font.SourceSans
    DropButton.TextColor3 = library.theme.text
    DropButton.TextSize = 14
    DropButton.Parent = MultiDropFrame
    
    local OptionsContainer = Instance.new("Frame")
    OptionsContainer.Name = "Options"
    OptionsContainer.BackgroundColor3 = library.theme.dark_contrast
    OptionsContainer.BorderSizePixel = 0
    OptionsContainer.Position = UDim2.new(0, 10, 0, 30)
    OptionsContainer.Size = UDim2.new(1, -20, 0, 0)
    OptionsContainer.ClipsDescendants = true
    OptionsContainer.Parent = MultiDropFrame
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = OptionsContainer
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 2)
    
    local selected = {}
end

-- Textbox Implementation
library.CreateTextbox = function(section, name, default, callback)
    local TextboxFrame = Instance.new("Frame")
    TextboxFrame.Name = name .. "Textbox"
    TextboxFrame.BackgroundColor3 = library.theme.light_contrast
    TextboxFrame.BorderSizePixel = 0
    TextboxFrame.Size = UDim2.new(1, 0, 0, 30)
    TextboxFrame.Parent = section
    
    local TextboxTitle = Instance.new("TextLabel")
    TextboxTitle.Name = "Title"
    TextboxTitle.Text = name
    TextboxTitle.BackgroundTransparency = 1
    TextboxTitle.Position = UDim2.new(0, 10, 0, 0)
    TextboxTitle.Size = UDim2.new(0, 200, 1, 0)
    TextboxTitle.Font = Enum.Font.SourceSans
    TextboxTitle.TextColor3 = library.theme.text
    TextboxTitle.TextSize = 14
    TextboxTitle.TextXAlignment = Enum.TextXAlignment.Left
    TextboxTitle.Parent = TextboxFrame
    
    local TextboxInput = Instance.new("TextBox")
    TextboxInput.Name = "Input"
    TextboxInput.Text = default or ""
    TextboxInput.PlaceholderText = "Enter text..."
    TextboxInput.BackgroundColor3 = library.theme.dark_contrast
    TextboxInput.BorderSizePixel = 0
    TextboxInput.Position = UDim2.new(1, -210, 0.5, -10)
    TextboxInput.Size = UDim2.new(0, 200, 0, 20)
    TextboxInput.Font = Enum.Font.SourceSans
    TextboxInput.TextColor3 = library.theme.text
    TextboxInput.TextSize = 14
    TextboxInput.Parent = TextboxFrame
    
    -- Add gradient
    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = library.theme.gradient1
    UIGradient.Rotation = 90
    UIGradient.Parent = TextboxInput
end

-- Button Implementation with Ripple Effect
library.CreateButton = function(section, name, callback)
    local ButtonFrame = Instance.new("Frame")
    ButtonFrame.Name = name .. "Button"
    ButtonFrame.BackgroundColor3 = library.theme.light_contrast
    ButtonFrame.BorderSizePixel = 0
    ButtonFrame.Size = UDim2.new(1, 0, 0, 30)
    ButtonFrame.Parent = section
    
    local Button = Instance.new("TextButton")
    Button.Name = "Button"
    Button.Text = name
    Button.BackgroundColor3 = library.theme.accent
    Button.BorderSizePixel = 0
    Button.Position = UDim2.new(0, 10, 0.5, -10)
    Button.Size = UDim2.new(1, -20, 0, 20)
    Button.Font = Enum.Font.SourceSansBold
    Button.TextColor3 = library.theme.text
    Button.TextSize = 14
    Button.AutoButtonColor = false
    Button.Parent = ButtonFrame
    
    -- Add corner
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 4)
    UICorner.Parent = Button
    
    -- Add gradient
    local UIGradient = Instance.new("UIGradient")
    UIGradient.Color = library.theme.gradient1
    UIGradient.Rotation = 90
    UIGradient.Parent = Button
end

-- List Implementation with Search
library.CreateList = function(section, name, items, callback)
    local ListFrame = Instance.new("Frame")
    ListFrame.Name = name .. "List"
    ListFrame.BackgroundColor3 = library.theme.light_contrast
    ListFrame.BorderSizePixel = 0
    ListFrame.Size = UDim2.new(1, 0, 0, 200)
    ListFrame.Parent = section
    
    local ListTitle = Instance.new("TextLabel")
    ListTitle.Name = "Title"
    ListTitle.Text = name
    ListTitle.BackgroundTransparency = 1
    ListTitle.Position = UDim2.new(0, 10, 0, 0)
    ListTitle.Size = UDim2.new(1, -20, 0, 30)
    ListTitle.Font = Enum.Font.SourceSansBold
    ListTitle.TextColor3 = library.theme.text
    ListTitle.TextSize = 14
    ListTitle.TextXAlignment = Enum.TextXAlignment.Left
    ListTitle.Parent = ListFrame
    
    local SearchBox = Instance.new("TextBox")
    SearchBox.Name = "SearchBox"
    SearchBox.PlaceholderText = "Search..."
    SearchBox.Text = ""
    SearchBox.BackgroundColor3 = library.theme.dark_contrast
    SearchBox.BorderSizePixel = 0
    SearchBox.Position = UDim2.new(0, 10, 0, 30)
    SearchBox.Size = UDim2.new(1, -20, 0, 20)
    SearchBox.Font = Enum.Font.SourceSans
    SearchBox.TextColor3 = library.theme.text
    SearchBox.TextSize = 14
    SearchBox.Parent = ListFrame
    
    local ListContainer = Instance.new("ScrollingFrame")
    ListContainer.Name = "Container"
    ListContainer.BackgroundColor3 = library.theme.dark_contrast
    ListContainer.BorderSizePixel = 0
    ListContainer.Position = UDim2.new(0, 10, 0, 60)
    ListContainer.Size = UDim2.new(1, -20, 0, 130)
    ListContainer.ScrollBarThickness = 2
    ListContainer.Parent = ListFrame
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = ListContainer
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 2)
end

-- Graph Implementation with Real-time Updates
library.CreateGraph = function(section, name, maxPoints)
    local GraphFrame = Instance.new("Frame")
    GraphFrame.Name = name .. "Graph"
    GraphFrame.BackgroundColor3 = library.theme.light_contrast
    GraphFrame.BorderSizePixel = 0
    GraphFrame.Size = UDim2.new(1, 0, 0, 200)
    GraphFrame.Parent = section
    
    local GraphTitle = Instance.new("TextLabel")
    GraphTitle.Name = "Title"
    GraphTitle.Text = name
    GraphTitle.BackgroundTransparency = 1
    GraphTitle.Position = UDim2.new(0, 10, 0, 0)
    GraphTitle.Size = UDim2.new(1, -20, 0, 30)
    GraphTitle.Font = Enum.Font.SourceSansBold
    GraphTitle.TextColor3 = library.theme.text
    GraphTitle.TextSize = 14
    GraphTitle.TextXAlignment = Enum.TextXAlignment.Left
    GraphTitle.Parent = GraphFrame
    
    local GraphContainer = Instance.new("Frame")
    GraphContainer.Name = "Container"
    GraphContainer.BackgroundColor3 = library.theme.dark_contrast
    GraphContainer.BorderSizePixel = 0
    GraphContainer.Position = UDim2.new(0, 10, 0, 40)
    GraphContainer.Size = UDim2.new(1, -20, 0, 150)
    GraphContainer.ClipsDescendants = true
    GraphContainer.Parent = GraphFrame
    
    -- Create grid lines
    for i = 0, 4 do
        local GridLine = Instance.new("Frame")
        GridLine.BackgroundColor3 = library.theme.light_contrast
        GridLine.BorderSizePixel = 0
        GridLine.Position = UDim2.new(0, 0, i/4, 0)
        GridLine.Size = UDim2.new(1, 0, 0, 1)
        GridLine.Parent = GraphContainer
    end
end
-- Notification System Implementation
library.notifications = {}

library.CreateNotification = function(title, text, duration)
    local NotifFrame = Instance.new("Frame")
    NotifFrame.Name = "Notification"
    NotifFrame.BackgroundColor3 = library.theme.background
    NotifFrame.BorderSizePixel = 0
    NotifFrame.Position = UDim2.new(1, -310, 1, -90)
    NotifFrame.Size = UDim2.new(0, 300, 0, 80)
    NotifFrame.Parent = library.ScreenGui
    
    local NotifTitle = Instance.new("TextLabel")
    NotifTitle.Name = "Title"
    NotifTitle.Text = title
    NotifTitle.BackgroundTransparency = 1
    NotifTitle.Position = UDim2.new(0, 10, 0, 5)
    NotifTitle.Size = UDim2.new(1, -20, 0, 20)
    NotifTitle.Font = Enum.Font.SourceSansBold
    NotifTitle.TextColor3 = library.theme.accent
    NotifTitle.TextSize = 16
    NotifTitle.TextXAlignment = Enum.TextXAlignment.Left
    NotifTitle.Parent = NotifFrame
    
    local NotifText = Instance.new("TextLabel")
    NotifText.Name = "Text"
    NotifText.Text = text
    NotifText.BackgroundTransparency = 1
    NotifText.Position = UDim2.new(0, 10, 0, 30)
    NotifText.Size = UDim2.new(1, -20, 0, 40)
    NotifText.Font = Enum.Font.SourceSans
    NotifText.TextColor3 = library.theme.text
    NotifText.TextSize = 14
    NotifText.TextWrapped = true
    NotifText.TextXAlignment = Enum.TextXAlignment.Left
    NotifText.Parent = NotifFrame
    
    local NotifBar = Instance.new("Frame")
    NotifBar.Name = "Bar"
    NotifBar.BackgroundColor3 = library.theme.accent
    NotifBar.BorderSizePixel = 0
    NotifBar.Position = UDim2.new(0, 0, 1, -2)
    NotifBar.Size = UDim2.new(1, 0, 0, 2)
    NotifBar.Parent = NotifFrame
end
-- Watermark System Implementation
library.CreateWatermark = function(text)
    local WatermarkFrame = Instance.new("Frame")
    WatermarkFrame.Name = "Watermark"
    WatermarkFrame.BackgroundColor3 = library.theme.background
    WatermarkFrame.BorderSizePixel = 0
    WatermarkFrame.Position = UDim2.new(0, 10, 0, 10)
    WatermarkFrame.Size = UDim2.new(0, 300, 0, 25)
    WatermarkFrame.Parent = library.ScreenGui
    
    local WatermarkGradient = Instance.new("UIGradient")
    WatermarkGradient.Color = library.theme.gradient2
    WatermarkGradient.Rotation = 90
    WatermarkGradient.Parent = WatermarkFrame
    
    local WatermarkText = Instance.new("TextLabel")
    WatermarkText.Name = "Text"
    WatermarkText.Text = text
    WatermarkText.BackgroundTransparency = 1
    WatermarkText.Position = UDim2.new(0, 10, 0, 0)
    WatermarkText.Size = UDim2.new(1, -20, 1, 0)
    WatermarkText.Font = Enum.Font.SourceSansBold
    WatermarkText.TextColor3 = library.theme.text
    WatermarkText.TextSize = 14
    WatermarkText.Parent = WatermarkFrame
    
    -- FPS Counter
    local fps = WatermarkText:Clone()
    fps.Position = UDim2.new(1, -100, 0, 0)
    fps.Size = UDim2.new(0, 90, 1, 0)
    fps.Parent = WatermarkFrame
    
    -- Update FPS
    local lastFrame = tick()
    local frameCount = 0
    
    game:GetService("RunService").RenderStepped:Connect(function()
        frameCount = frameCount + 1
        local now = tick()
        
        if now - lastFrame >= 1 then
            fps.Text = frameCount .. " FPS"
            frameCount = 0
            lastFrame = now
        end
    end)
end
-- Config System Implementation
library.configs = {
    folder = "primordial",
    extension = ".cfg"
}

library.CreateConfig = function()
    local ConfigFrame = Instance.new("Frame")
    ConfigFrame.Name = "ConfigSystem"
    ConfigFrame.BackgroundColor3 = library.theme.background
    ConfigFrame.BorderSizePixel = 0
    ConfigFrame.Position = UDim2.new(0.5, -150, 0.5, -100)
    ConfigFrame.Size = UDim2.new(0, 300, 0, 200)
    ConfigFrame.Parent = library.ScreenGui
    
    local ConfigList = Instance.new("ScrollingFrame")
    ConfigList.Name = "ConfigList"
    ConfigList.BackgroundColor3 = library.theme.dark_contrast
    ConfigList.BorderSizePixel = 0
    ConfigList.Position = UDim2.new(0, 10, 0, 40)
    ConfigList.Size = UDim2.new(1, -20, 1, -90)
    ConfigList.ScrollBarThickness = 2
    ConfigList.Parent = ConfigFrame
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = ConfigList
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 2)
    
    local SaveButton = Instance.new("TextButton")
    SaveButton.Name = "SaveButton"
    SaveButton.Text = "Save Config"
    SaveButton.BackgroundColor3 = library.theme.accent
    SaveButton.BorderSizePixel = 0
    SaveButton.Position = UDim2.new(0, 10, 1, -40)
    SaveButton.Size = UDim2.new(0.5, -15, 0, 30)
    SaveButton.Font = Enum.Font.SourceSansBold
    SaveButton.TextColor3 = library.theme.text
    SaveButton.TextSize = 14
    SaveButton.Parent = ConfigFrame
    
    local LoadButton = SaveButton:Clone()
    LoadButton.Name = "LoadButton"
    LoadButton.Text = "Load Config"
    LoadButton.Position = UDim2.new(0.5, 5, 1, -40)
    LoadButton.Parent = ConfigFrame
end


-- Animation System Implementation
library.animations = {
    tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    active = {}
}

library.CreateAnimation = function(instance, properties)
    local animation = TweenService:Create(instance, library.animations.tweenInfo, properties)
    table.insert(library.animations.active, animation)
    animation:Play()
    return animation
end

library.CreateTabAnimation = function(tab)
    local TabIndicator = Instance.new("Frame")
    TabIndicator.Name = "Indicator"
    TabIndicator.BackgroundColor3 = library.theme.accent
    TabIndicator.BorderSizePixel = 0
    TabIndicator.Size = UDim2.new(0, 2, 0, 20)
    TabIndicator.Position = UDim2.new(0, 0, 0.5, -10)
    TabIndicator.Parent = tab
    
    local IndicatorGradient = Instance.new("UIGradient")
    IndicatorGradient.Color = library.theme.gradient1
    IndicatorGradient.Rotation = 90
    IndicatorGradient.Parent = TabIndicator
    
    return TabIndicator
end

library.CreateButtonAnimation = function(button)
    button.MouseEnter:Connect(function()
        library.CreateAnimation(button, {
            BackgroundColor3 = library.theme.accent,
            TextColor3 = library.theme.background
        })
    end)
    
    button.MouseLeave:Connect(function()
        library.CreateAnimation(button, {
            BackgroundColor3 = library.theme.dark_contrast,
            TextColor3 = library.theme.text
        })
    end)
end
-- Tab Organization System
library.tabs = {
    active = nil,
    list = {},
    containers = {}
}

library.OrganizeTabs = function()
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabOrganizer"
    TabContainer.BackgroundColor3 = library.theme.dark_contrast
    TabContainer.BorderSizePixel = 0
    TabContainer.Position = UDim2.new(0, 0, 0, 40)
    TabContainer.Size = UDim2.new(0, 60, 1, -40)
    TabContainer.Parent = library.MainFrame
    
    local TabList = Instance.new("ScrollingFrame")
    TabList.Name = "TabList"
    TabList.BackgroundTransparency = 1
    TabList.BorderSizePixel = 0
    TabList.Position = UDim2.new(0, 0, 0, 0)
    TabList.Size = UDim2.new(1, 0, 1, 0)
    TabList.ScrollBarThickness = 0
    TabList.Parent = TabContainer
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = TabList
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 5)
    
    library.tabs.container = TabList
    return TabList
end

-- Drag System Implementation
library.dragging = {
    active = false,
    instance = nil,
    offset = Vector2.new()
}

library.CreateDrag = function(frame)
    local dragInput
    local dragStart
    local startPos
    
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            library.dragging.active = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    library.dragging.active = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and library.dragging.active then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end
-- Window Snapping System
library.snapping = {
    enabled = true,
    threshold = 10,
    positions = {
        {scale = Vector2.new(0, 0), offset = Vector2.new(10, 10)},        -- Top Left
        {scale = Vector2.new(1, 0), offset = Vector2.new(-410, 10)},      -- Top Right
        {scale = Vector2.new(0, 1), offset = Vector2.new(10, -610)},      -- Bottom Left
        {scale = Vector2.new(1, 1), offset = Vector2.new(-410, -610)}     -- Bottom Right
    }
}

library.SnapToPosition = function(frame)
    local framePos = frame.Position
    local viewportSize = workspace.CurrentCamera.ViewportSize
    local frameSize = frame.AbsoluteSize
    
    for _, position in pairs(library.snapping.positions) do
        local targetPos = Vector2.new(
            position.scale.X * viewportSize.X + position.offset.X,
            position.scale.Y * viewportSize.Y + position.offset.Y
        )
        
        local distance = (Vector2.new(framePos.X.Offset, framePos.Y.Offset) - targetPos).Magnitude
        
        if distance < library.snapping.threshold then
            frame.Position = UDim2.new(position.scale.X, position.offset.X, position.scale.Y, position.offset.Y)
            break
        end
    end
end
-- Save/Load System Implementation
library.SaveSystem = {
    folder = "primordial",
    extension = ".json",
    current = nil
}

library.SaveConfig = function(name)
    local config = {
        flags = library.flags,
        theme = library.theme,
        watermark = library.watermark,
        positions = {}
    }
    
    -- Save window positions
    for name, frame in pairs(library.windows) do
        config.positions[name] = {
            X = frame.Position.X.Offset,
            Y = frame.Position.Y.Offset
        }
    end
    
    -- Create folder if it doesn't exist
    if not isfolder(library.SaveSystem.folder) then
        makefolder(library.SaveSystem.folder)
    end
    
    -- Write config to file
    writefile(
        library.SaveSystem.folder .. "/" .. name .. library.SaveSystem.extension,
        game:GetService("HttpService"):JSONEncode(config)
    )
    
    library.SaveSystem.current = name
    library.CreateNotification("Success", "Saved config: " .. name, 3)
end
-- Load Config Implementation
library.LoadConfig = function(name)
    local path = library.SaveSystem.folder .. "/" .. name .. library.SaveSystem.extension
    
    if isfile(path) then
        local config = game:GetService("HttpService"):JSONDecode(readfile(path))
        
        -- Load flags
        for flag, value in pairs(config.flags) do
            if library.flags[flag] then
                library.flags[flag] = value
                
                -- Update UI elements
                if library.elements[flag] then
                    library.elements[flag]:Set(value)
                end
            end
        end
        
        -- Load theme
        for option, color in pairs(config.theme) do
            if library.theme[option] then
                library.theme[option] = color
                library.UpdateTheme()
            end
        end
        
        -- Load positions
        for name, position in pairs(config.positions) do
            if library.windows[name] then
                library.windows[name].Position = UDim2.new(0, position.X, 0, position.Y)
            end
        end
        
        library.SaveSystem.current = name
        library.CreateNotification("Success", "Loaded config: " .. name, 3)
    end
end
-- Theme System Implementation
library.UpdateTheme = function()
    for _, element in pairs(library.elements) do
        if element.UpdateTheme then
            element:UpdateTheme()
        end
    end
    
    -- Update Main UI
    library.MainFrame.BackgroundColor3 = library.theme.background
    library.TabContainer.BackgroundColor3 = library.theme.dark_contrast
    
    -- Update All Buttons
    for _, button in pairs(library.buttons) do
        button.BackgroundColor3 = library.theme.accent
        button.TextColor3 = library.theme.text
    end
    
    -- Update All Toggles
    for _, toggle in pairs(library.toggles) do
        if toggle.Value then
            toggle.Indicator.BackgroundColor3 = library.theme.accent
        else
            toggle.Indicator.BackgroundColor3 = library.theme.dark_contrast
        end
    end
    
    -- Update All Sliders
    for _, slider in pairs(library.sliders) do
        slider.Bar.BackgroundColor3 = library.theme.dark_contrast
        slider.Fill.BackgroundColor3 = library.theme.accent
    end
    
    -- Update All Dropdowns
    for _, dropdown in pairs(library.dropdowns) do
        dropdown.Container.BackgroundColor3 = library.theme.dark_contrast
        dropdown.Button.BackgroundColor3 = library.theme.light_contrast
    end
end

-- Keybind System Implementation with Blacklist
library.keybinds = {
    active = {},
    blacklist = {
        Enum.KeyCode.Unknown,
        Enum.KeyCode.W,
        Enum.KeyCode.A,
        Enum.KeyCode.S,
        Enum.KeyCode.D,
        Enum.KeyCode.Space,
        Enum.KeyCode.Backspace
    }
}

library.RegisterKeybind = function(name, default, callback)
    library.keybinds.active[name] = {
        key = default,
        callback = callback,
        active = false
    }
    
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == library.keybinds.active[name].key then
            library.keybinds.active[name].active = true
            library.keybinds.active[name].callback(true)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.KeyCode == library.keybinds.active[name].key then
            library.keybinds.active[name].active = false
            library.keybinds.active[name].callback(false)
        end
    end)
end
-- Performance Optimization System
library.performance = {
    fps_target = 60,
    render_items = {},
    update_queue = {},
    last_frame = tick()
}

library.OptimizeRendering = function()
    -- Smart rendering system
    RunService.RenderStepped:Connect(function()
        local now = tick()
        local delta = now - library.performance.last_frame
        library.performance.last_frame = now
        
        -- Process update queue
        for i, item in pairs(library.performance.update_queue) do
            if item.last_update + item.interval <= now then
                item.callback()
                item.last_update = now
            end
        end
        
        -- Only render visible elements
        for _, element in pairs(library.performance.render_items) do
            if element.Visible then
                local pos = element.AbsolutePosition
                local size = element.AbsoluteSize
                local viewport = workspace.CurrentCamera.ViewportSize
                
                if pos.X + size.X >= 0 and pos.X <= viewport.X and
                   pos.Y + size.Y >= 0 and pos.Y <= viewport.Y then
                    element.Enabled = true
                else
                    element.Enabled = false
                end
            end
        end
    end)
end
-- Menu Animation System
library.animations.menu = {
    duration = 0.3,
    active = false,
    queue = {}
}

library.AnimateMenu = function(show)
    local mainFrame = library.MainFrame
    local startPos = show and UDim2.new(0.5, -400, 0, -600) or mainFrame.Position
    local endPos = show and UDim2.new(0.5, -400, 0.5, -300) or UDim2.new(0.5, -400, 0, -600)
    
    local tween = TweenService:Create(mainFrame, 
        TweenInfo.new(library.animations.menu.duration, Enum.EasingStyle.Back), 
        {Position = endPos}
    )
    
    tween:Play()
    library.animations.menu.active = show
end

-- Tab Fade System
library.tabFade = {
    duration = 0.2,
    active_tab = nil
}

library.FadeTab = function(newTab)
    if library.tabFade.active_tab == newTab then return end
    
    -- Fade out current tab
    if library.tabFade.active_tab then
        TweenService:Create(library.tabFade.active_tab, 
            TweenInfo.new(library.tabFade.duration),
            {BackgroundTransparency = 1}
        ):Play()
        
        for _, element in pairs(library.tabFade.active_tab:GetChildren()) do
            if element:IsA("Frame") or element:IsA("TextLabel") or element:IsA("TextButton") then
                TweenService:Create(element,
                    TweenInfo.new(library.tabFade.duration),
                    {BackgroundTransparency = 1, TextTransparency = 1}
                ):Play()
            end
        end
    end
    
    -- Fade in new tab
    TweenService:Create(newTab,
        TweenInfo.new(library.tabFade.duration),
        {BackgroundTransparency = 0}
    ):Play()
    
    for _, element in pairs(newTab:GetChildren()) do
        if element:IsA("Frame") or element:IsA("TextLabel") or element:IsA("TextButton") then
            TweenService:Create(element,
                TweenInfo.new(library.tabFade.duration),
                {BackgroundTransparency = 0, TextTransparency = 0}
            ):Play()
        end
    end
    
    library.tabFade.active_tab = newTab
end
-- Advanced Color Picker Implementation
library.CreateColorPicker = function(section, name, default, callback)
    local ColorPickerHolder = Instance.new("Frame")
    ColorPickerHolder.Name = name .. "ColorPicker"
    ColorPickerHolder.BackgroundColor3 = library.theme.light_contrast
    ColorPickerHolder.BorderSizePixel = 0
    ColorPickerHolder.Size = UDim2.new(1, 0, 0, 150)
    ColorPickerHolder.Parent = section
    
    -- Main color wheel
    local ColorWheel = Instance.new("ImageButton")
    ColorWheel.Name = "ColorWheel"
    ColorWheel.Image = "rbxassetid://6020299385"
    ColorWheel.BackgroundTransparency = 1
    ColorWheel.Position = UDim2.new(0, 10, 0, 25)
    ColorWheel.Size = UDim2.new(0, 100, 0, 100)
    ColorWheel.Parent = ColorPickerHolder
    
    -- Darkness/brightness slider
    local ValueSlider = Instance.new("ImageButton")
    ValueSlider.Name = "ValueSlider"
    ValueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ValueSlider.BorderSizePixel = 0
    ValueSlider.Position = UDim2.new(0, 120, 0, 25)
    ValueSlider.Size = UDim2.new(0, 15, 0, 100)
    ValueSlider.Parent = ColorPickerHolder
    
    -- Color preview
    local Preview = Instance.new("Frame")
    Preview.Name = "Preview"
    Preview.BackgroundColor3 = default or Color3.fromRGB(255, 255, 255)
    Preview.BorderSizePixel = 0
    Preview.Position = UDim2.new(0, 145, 0, 25)
    Preview.Size = UDim2.new(0, 30, 0, 30)
    Preview.Parent = ColorPickerHolder
end
-- Multi-Window Support Implementation
library.windows = {
    active = {},
    dragging = {}
}

library.CreateWindow = function(name, position)
    local window = {
        name = name,
        position = position or UDim2.new(0.5, -300, 0.5, -200),
        size = UDim2.new(0, 600, 0, 400),
        tabs = {}
    }
    
    -- Create window frame
    window.frame = Instance.new("Frame")
    window.frame.Name = name .. "Window"
    window.frame.BackgroundColor3 = library.theme.background
    window.frame.BorderSizePixel = 0
    window.frame.Position = window.position
    window.frame.Size = window.size
    window.frame.Parent = library.ScreenGui
    
    -- Top bar
    window.topbar = Instance.new("Frame")
    window.topbar.Name = "TopBar"
    window.topbar.BackgroundColor3 = library.theme.accent
    window.topbar.BorderSizePixel = 0
    window.topbar.Size = UDim2.new(1, 0, 0, 30)
    window.topbar.Parent = window.frame
    
    -- Title
    window.title = Instance.new("TextLabel")
    window.title.Name = "Title"
    window.title.Text = name
    window.title.BackgroundTransparency = 1
    window.title.Position = UDim2.new(0, 10, 0, 0)
    window.title.Size = UDim2.new(1, -20, 1, 0)
    window.title.Font = Enum.Font.SourceSansBold
    window.title.TextColor3 = library.theme.text
    window.title.TextSize = 14
    window.title.TextXAlignment = Enum.TextXAlignment.Left
    window.title.Parent = window.topbar
    
    library.windows.active[name] = window
    return window
end

-- Context Menu System Implementation
library.contextMenu = {
    active = nil,
    items = {}
}

library.CreateContextMenu = function(items)
    local ContextMenu = Instance.new("Frame")
    ContextMenu.Name = "ContextMenu"
    ContextMenu.BackgroundColor3 = library.theme.background
    ContextMenu.BorderSizePixel = 0
    ContextMenu.Size = UDim2.new(0, 150, 0, #items * 25)
    ContextMenu.Visible = false
    ContextMenu.ZIndex = 100
    ContextMenu.Parent = library.ScreenGui
    
    -- Add items
    for i, item in ipairs(items) do
        local Button = Instance.new("TextButton")
        Button.Name = item.name
        Button.Text = item.name
        Button.BackgroundColor3 = library.theme.light_contrast
        Button.BorderSizePixel = 0
        Button.Position = UDim2.new(0, 0, 0, (i-1) * 25)
        Button.Size = UDim2.new(1, 0, 0, 25)
        Button.Font = Enum.Font.SourceSans
        Button.TextColor3 = library.theme.text
        Button.TextSize = 14
        Button.ZIndex = 101
        Button.Parent = ContextMenu
        
        Button.MouseButton1Click:Connect(function()
            item.callback()
            ContextMenu.Visible = false
        end)
    end
    
    return ContextMenu
end
-- Tooltip System Implementation
library.tooltips = {
    active = nil,
    queue = {}
}

library.CreateTooltip = function(text)
    local Tooltip = Instance.new("Frame")
    Tooltip.Name = "Tooltip"
    Tooltip.BackgroundColor3 = library.theme.background
    Tooltip.BorderSizePixel = 0
    Tooltip.Size = UDim2.new(0, 200, 0, 30)
    Tooltip.Visible = false
    Tooltip.ZIndex = 200
    Tooltip.Parent = library.ScreenGui
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "Text"
    TextLabel.Text = text
    TextLabel.BackgroundTransparency = 1
    TextLabel.Size = UDim2.new(1, -10, 1, 0)
    TextLabel.Position = UDim2.new(0, 5, 0, 0)
    TextLabel.Font = Enum.Font.SourceSans
    TextLabel.TextColor3 = library.theme.text
    TextLabel.TextSize = 14
    TextLabel.TextWrapped = true
    TextLabel.ZIndex = 201
    TextLabel.Parent = Tooltip
    
    -- Add shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.BackgroundTransparency = 1
    Shadow.Position = UDim2.new(0, -15, 0, -15)
    Shadow.Size = UDim2.new(1, 30, 1, 30)
    Shadow.Image = "rbxassetid://5028857084"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.6
    Shadow.ZIndex = 199
    Shadow.Parent = Tooltip
    
    return Tooltip
end
-- Search System Implementation
library.search = {
    active = false,
    results = {},
    index = {}
}

library.CreateSearchBar = function()
    local SearchFrame = Instance.new("Frame")
    SearchFrame.Name = "SearchBar"
    SearchFrame.BackgroundColor3 = library.theme.background
    SearchFrame.BorderSizePixel = 0
    SearchFrame.Position = UDim2.new(0.5, -150, 0, -50)
    SearchFrame.Size = UDim2.new(0, 300, 0, 40)
    SearchFrame.ZIndex = 300
    SearchFrame.Parent = library.ScreenGui
    
    local SearchBox = Instance.new("TextBox")
    SearchBox.Name = "Input"
    SearchBox.Text = ""
    SearchBox.PlaceholderText = "Search..."
    SearchBox.BackgroundTransparency = 1
    SearchBox.Position = UDim2.new(0, 10, 0, 0)
    SearchBox.Size = UDim2.new(1, -20, 1, 0)
    SearchBox.Font = Enum.Font.SourceSans
    SearchBox.TextColor3 = library.theme.text
    SearchBox.TextSize = 16
    SearchBox.ZIndex = 301
    SearchBox.Parent = SearchFrame
    
    local ResultsFrame = Instance.new("ScrollingFrame")
    ResultsFrame.Name = "Results"
    ResultsFrame.BackgroundColor3 = library.theme.background
    ResultsFrame.BorderSizePixel = 0
    ResultsFrame.Position = UDim2.new(0, 0, 1, 0)
    ResultsFrame.Size = UDim2.new(1, 0, 0, 200)
    ResultsFrame.ScrollBarThickness = 2
    ResultsFrame.Visible = false
    ResultsFrame.ZIndex = 300
    ResultsFrame.Parent = SearchFrame
    
    return SearchFrame
end
-- Macro System Implementation
library.macros = {
    active = {},
    recording = false,
    current = nil
}

library.CreateMacroSystem = function()
    local MacroFrame = Instance.new("Frame")
    MacroFrame.Name = "MacroSystem"
    MacroFrame.BackgroundColor3 = library.theme.background
    MacroFrame.BorderSizePixel = 0
    MacroFrame.Position = UDim2.new(1, -320, 0, 10)
    MacroFrame.Size = UDim2.new(0, 300, 0, 400)
    MacroFrame.Parent = library.ScreenGui
    
    local MacroList = Instance.new("ScrollingFrame")
    MacroList.Name = "MacroList"
    MacroList.BackgroundTransparency = 1
    MacroList.Position = UDim2.new(0, 10, 0, 40)
    MacroList.Size = UDim2.new(1, -20, 1, -90)
    MacroList.ScrollBarThickness = 2
    MacroList.Parent = MacroFrame
    
    local RecordButton = Instance.new("TextButton")
    RecordButton.Name = "Record"
    RecordButton.Text = "Record New Macro"
    RecordButton.BackgroundColor3 = library.theme.accent
    RecordButton.BorderSizePixel = 0
    RecordButton.Position = UDim2.new(0, 10, 1, -40)
    RecordButton.Size = UDim2.new(1, -20, 0, 30)
    RecordButton.Font = Enum.Font.SourceSansBold
    RecordButton.TextColor3 = library.theme.text
    RecordButton.TextSize = 14
    RecordButton.Parent = MacroFrame
    
    return MacroFrame
end
-- Profile System Implementation
library.profiles = {
    active = {},
    current = nil,
    folder = "primordial/profiles"
}

library.CreateProfileSystem = function()
    local ProfileFrame = Instance.new("Frame")
    ProfileFrame.Name = "ProfileSystem"
    ProfileFrame.BackgroundColor3 = library.theme.background
    ProfileFrame.BorderSizePixel = 0
    ProfileFrame.Position = UDim2.new(0, 10, 0, 10)
    ProfileFrame.Size = UDim2.new(0, 200, 0, 300)
    ProfileFrame.Parent = library.ScreenGui
    
    -- Profile List
    local ProfileList = Instance.new("ScrollingFrame")
    ProfileList.Name = "Profiles"
    ProfileList.BackgroundColor3 = library.theme.dark_contrast
    ProfileList.BorderSizePixel = 0
    ProfileList.Position = UDim2.new(0, 10, 0, 40)
    ProfileList.Size = UDim2.new(1, -20, 1, -90)
    ProfileList.ScrollBarThickness = 2
    ProfileList.Parent = ProfileFrame
    
    -- Create Profile Button
    local CreateButton = Instance.new("TextButton")
    CreateButton.Name = "Create"
    CreateButton.Text = "Create Profile"
    CreateButton.BackgroundColor3 = library.theme.accent
    CreateButton.BorderSizePixel = 0
    CreateButton.Position = UDim2.new(0, 10, 1, -40)
    CreateButton.Size = UDim2.new(1, -20, 0, 30)
    CreateButton.Font = Enum.Font.SourceSansBold
    CreateButton.TextColor3 = library.theme.text
    CreateButton.TextSize = 14
    CreateButton.Parent = ProfileFrame
    
    return ProfileFrame
end
-- Final Initialization System
library.Initialize = function()
    -- Create main GUI elements
    library.Init()
    
    -- Setup performance optimization
    library.OptimizeRendering()
    
    -- Create essential systems
    library.searchBar = library.CreateSearchBar()
    library.macroSystem = library.CreateMacroSystem()
    library.profileSystem = library.CreateProfileSystem()
    
    -- Setup keyboard shortcuts
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            -- Toggle UI
            if input.KeyCode == Enum.KeyCode.Insert then
                library.AnimateMenu(not library.animations.menu.active)
            end
            
            -- Quick search
            if input.KeyCode == Enum.KeyCode.LeftControl then
                library.searchBar.Visible = true
                library.searchBar.Input:CaptureFocus()
            end
        end
    end)
    
    -- Initialize watermark
    library.CreateWatermark("Primordial | " .. os.date("%X"))
    
    -- Load default config
    if isfile(library.SaveSystem.folder .. "/default.json") then
        library.LoadConfig("default")
    end
end
